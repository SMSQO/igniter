终端机在文法中未使用

    '&'
    '|'
    '^'
    TOK_DOT
    TOK_DOUBLE_TO
    TOK_FROM
    STR_LITERAL


语法

    0 $accept: package $end

    1 type_identifier: U_IDENTIFIER
    2                | U_IDENTIFIER '[' type_parameters ']'
    3                | func_type_identifier

    4 func_type_identifier: '(' ')' TOK_TO type_identifier
    5                     | '(' type_identifiers ')' TOK_TO type_identifier

    6 type_identifiers: type_identifier
    7                 | type_identifiers ',' type_identifier

    8 type_parameters: type_param
    9                | type_parameters ',' type_param

   10 type_param: type_identifier
   11           | TOK_NUMBER_INT

   12 statement: expr
   13          | def
   14          | ret

   15 ret: TOK_RETURN expr
   16    | TOK_RETURN

   17 expr: L_IDENTIFIER
   18     | '(' expr ')'
   19     | call_expr
   20     | binary_expr
   21     | number_expr
   22     | boolean_expr
   23     | if_expr
   24     | array_expr
   25     | index_expr
   26     | lambda_expr
   27     | unit_expr
   28     | unary_expr

   29 call_expr: L_IDENTIFIER '(' ')'
   30          | L_IDENTIFIER '(' exprs ')'

   31 index_expr: L_IDENTIFIER '[' exprs ']'

   32 binary_expr: expr '+' expr
   33            | expr '-' expr
   34            | expr '*' expr
   35            | expr '/' expr
   36            | expr '%' expr
   37            | expr '<' expr
   38            | expr '>' expr
   39            | expr TOK_EQUAL expr
   40            | expr TOK_NON_EQUAL expr
   41            | expr TOK_LE expr
   42            | expr TOK_GE expr
   43            | expr TOK_OR expr
   44            | expr TOK_AND expr

   45 unary_expr: '!' expr

   46 array_expr: '[' ']'
   47           | '[' exprs ']'

   48 number_expr: TOK_NUMBER_INT
   49            | TOK_NUMBER_DOUBLE

   50 boolean_expr: TOK_TRUE
   51             | TOK_FALSE

   52 unit_expr: TOK_UNIT

   53 if_expr: TOK_IF expr exprBlock TOK_ELSE exprBlock
   54        | TOK_IF expr exprBlock TOK_ELSE if_expr
   55        | TOK_IF expr exprBlock

   56 lambda_expr: '{' val_def_shorts TOK_TO stmts '}'
   57            | '{' stmts '}'

   58 fun_def: TOK_FUN prototype '=' expr
   59        | TOK_FUN prototype_short '=' expr
   60        | TOK_FUN prototype exprBlock

   61 exprBlock: '{' stmts '}'
   62          | '{' '}'

   63 import: TOK_IMPORT prototype

   64 prototype: prototype_short ':' type_identifier

   65 prototype_short: L_IDENTIFIER '(' ')'
   66                | L_IDENTIFIER '(' val_def_shorts ')'

   67 def: val_def
   68    | fun_def
   69    | import

   70 val_def: TOK_VAL val_def_short '=' expr

   71 val_def_short: L_IDENTIFIER ':' type_identifier
   72              | L_IDENTIFIER

   73 package: %empty
   74        | defs

   75 exprs: expr
   76      | exprs ',' expr

   77 defs: def
   78     | defs def

   79 val_def_shorts: val_def_short
   80               | val_def_shorts ',' val_def_short

   81 stmts: statement
   82      | stmtsHead
   83      | stmtsHead statement

   84 stmtsHead: statement TOK_SEP
   85          | stmtsHead statement TOK_SEP


终结语词，附有它们出现处的规则

    $end (0) 0
    '!' (33) 45
    '%' (37) 36
    '&' (38)
    '(' (40) 4 5 18 29 30 65 66
    ')' (41) 4 5 18 29 30 65 66
    '*' (42) 34
    '+' (43) 32
    ',' (44) 7 9 76 80
    '-' (45) 33
    '/' (47) 35
    ':' (58) 64 71
    '<' (60) 37
    '=' (61) 58 59 70
    '>' (62) 38
    '[' (91) 2 31 46 47
    ']' (93) 2 31 46 47
    '^' (94)
    '{' (123) 56 57 61 62
    '|' (124)
    '}' (125) 56 57 61 62
    error (256)
    TOK_OR (258) 43
    TOK_AND (259) 44
    TOK_EQUAL (260) 39
    TOK_GE (261) 42
    TOK_LE (262) 41
    TOK_NON_EQUAL (263) 40
    TOK_DOT (264)
    TOK_TO (265) 4 5 56
    TOK_DOUBLE_TO (266)
    TOK_FROM (267)
    TOK_TRUE (268) 50
    TOK_FALSE (269) 51
    TOK_UNIT (270) 52
    TOK_IMPORT (271) 63
    TOK_FUN (272) 58 59 60
    TOK_IF (273) 53 54 55
    TOK_ELSE (274) 53 54
    TOK_VAL (275) 70
    TOK_RETURN (276) 15 16
    TOK_NUMBER_INT <str> (277) 11 48
    TOK_NUMBER_DOUBLE <str> (278) 49
    L_IDENTIFIER <str> (279) 17 29 30 31 65 66 71 72
    U_IDENTIFIER <str> (280) 1 2
    STR_LITERAL <ast> (281)
    TOK_SEP (282) 84 85


非终结语词，附有它们出现处的规则

    $accept (48)
        on left: 0
    type_identifier <ast> (49)
        on left: 1 2 3
        on right: 4 5 6 7 10 64 71
    func_type_identifier <ast> (50)
        on left: 4 5
        on right: 3
    type_identifiers <ast> (51)
        on left: 6 7
        on right: 5 7
    type_parameters <ast> (52)
        on left: 8 9
        on right: 2 9
    type_param <ast> (53)
        on left: 10 11
        on right: 8 9
    statement <ast> (54)
        on left: 12 13 14
        on right: 81 83 84 85
    ret <ast> (55)
        on left: 15 16
        on right: 14
    expr <ast> (56)
        on left: 17 18 19 20 21 22 23 24 25 26 27 28
        on right: 12 15 18 32 33 34 35 36 37 38 39 40 41 42 43 44 45 53 54 55 58 59 70 75 76
    call_expr <ast> (57)
        on left: 29 30
        on right: 19
    index_expr <ast> (58)
        on left: 31
        on right: 25
    binary_expr <ast> (59)
        on left: 32 33 34 35 36 37 38 39 40 41 42 43 44
        on right: 20
    unary_expr <ast> (60)
        on left: 45
        on right: 28
    array_expr <ast> (61)
        on left: 46 47
        on right: 24
    number_expr <ast> (62)
        on left: 48 49
        on right: 21
    boolean_expr <ast> (63)
        on left: 50 51
        on right: 22
    unit_expr <ast> (64)
        on left: 52
        on right: 27
    if_expr <ast> (65)
        on left: 53 54 55
        on right: 23 54
    lambda_expr <ast> (66)
        on left: 56 57
        on right: 26
    fun_def <ast> (67)
        on left: 58 59 60
        on right: 68
    exprBlock <ast> (68)
        on left: 61 62
        on right: 53 54 55 60
    import <ast> (69)
        on left: 63
        on right: 69
    prototype <ast> (70)
        on left: 64
        on right: 58 60 63
    prototype_short <ast> (71)
        on left: 65 66
        on right: 59 64
    def <ast> (72)
        on left: 67 68 69
        on right: 13 77 78
    val_def <ast> (73)
        on left: 70
        on right: 67
    val_def_short <ast> (74)
        on left: 71 72
        on right: 70 79 80
    package <ast> (75)
        on left: 73 74
        on right: 0
    exprs <ast> (76)
        on left: 75 76
        on right: 30 31 47 76
    defs <ast> (77)
        on left: 77 78
        on right: 74 78
    val_def_shorts <ast> (78)
        on left: 79 80
        on right: 56 66 80
    stmts <ast> (79)
        on left: 81 82 83
        on right: 56 57 61
    stmtsHead <ast> (80)
        on left: 84 85
        on right: 82 83 85


状态 0

    0 $accept: . package $end

    TOK_IMPORT  偏移，并进入状态 1
    TOK_FUN     偏移，并进入状态 2
    TOK_VAL     偏移，并进入状态 3

    $default  使用规则 73 以归约 (package)

    fun_def  转到状态 4
    import   转到状态 5
    def      转到状态 6
    val_def  转到状态 7
    package  转到状态 8
    defs     转到状态 9


状态 1

   63 import: TOK_IMPORT . prototype

    L_IDENTIFIER  偏移，并进入状态 10

    prototype        转到状态 11
    prototype_short  转到状态 12


状态 2

   58 fun_def: TOK_FUN . prototype '=' expr
   59        | TOK_FUN . prototype_short '=' expr
   60        | TOK_FUN . prototype exprBlock

    L_IDENTIFIER  偏移，并进入状态 10

    prototype        转到状态 13
    prototype_short  转到状态 14


状态 3

   70 val_def: TOK_VAL . val_def_short '=' expr

    L_IDENTIFIER  偏移，并进入状态 15

    val_def_short  转到状态 16


状态 4

   68 def: fun_def .

    $default  使用规则 68 以归约 (def)


状态 5

   69 def: import .

    $default  使用规则 69 以归约 (def)


状态 6

   77 defs: def .

    $default  使用规则 77 以归约 (defs)


状态 7

   67 def: val_def .

    $default  使用规则 67 以归约 (def)


状态 8

    0 $accept: package . $end

    $end  偏移，并进入状态 17


状态 9

   74 package: defs .
   78 defs: defs . def

    TOK_IMPORT  偏移，并进入状态 1
    TOK_FUN     偏移，并进入状态 2
    TOK_VAL     偏移，并进入状态 3

    $default  使用规则 74 以归约 (package)

    fun_def  转到状态 4
    import   转到状态 5
    def      转到状态 18
    val_def  转到状态 7


状态 10

   65 prototype_short: L_IDENTIFIER . '(' ')'
   66                | L_IDENTIFIER . '(' val_def_shorts ')'

    '('  偏移，并进入状态 19


状态 11

   63 import: TOK_IMPORT prototype .

    $default  使用规则 63 以归约 (import)


状态 12

   64 prototype: prototype_short . ':' type_identifier

    ':'  偏移，并进入状态 20


状态 13

   58 fun_def: TOK_FUN prototype . '=' expr
   60        | TOK_FUN prototype . exprBlock

    '{'  偏移，并进入状态 21
    '='  偏移，并进入状态 22

    exprBlock  转到状态 23


状态 14

   59 fun_def: TOK_FUN prototype_short . '=' expr
   64 prototype: prototype_short . ':' type_identifier

    '='  偏移，并进入状态 24
    ':'  偏移，并进入状态 20


状态 15

   71 val_def_short: L_IDENTIFIER . ':' type_identifier
   72              | L_IDENTIFIER .

    ':'  偏移，并进入状态 25

    $default  使用规则 72 以归约 (val_def_short)


状态 16

   70 val_def: TOK_VAL val_def_short . '=' expr

    '='  偏移，并进入状态 26


状态 17

    0 $accept: package $end .

    $default  接受


状态 18

   78 defs: defs def .

    $default  使用规则 78 以归约 (defs)


状态 19

   65 prototype_short: L_IDENTIFIER '(' . ')'
   66                | L_IDENTIFIER '(' . val_def_shorts ')'

    ')'           偏移，并进入状态 27
    L_IDENTIFIER  偏移，并进入状态 15

    val_def_short   转到状态 28
    val_def_shorts  转到状态 29


状态 20

   64 prototype: prototype_short ':' . type_identifier

    '('           偏移，并进入状态 30
    U_IDENTIFIER  偏移，并进入状态 31

    type_identifier       转到状态 32
    func_type_identifier  转到状态 33


状态 21

   61 exprBlock: '{' . stmts '}'
   62          | '{' . '}'

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IMPORT         偏移，并进入状态 1
    TOK_FUN            偏移，并进入状态 2
    TOK_IF             偏移，并进入状态 39
    TOK_VAL            偏移，并进入状态 3
    TOK_RETURN         偏移，并进入状态 40
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45
    '}'                偏移，并进入状态 46

    statement     转到状态 47
    ret           转到状态 48
    expr          转到状态 49
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59
    fun_def       转到状态 4
    import        转到状态 5
    def           转到状态 60
    val_def       转到状态 7
    stmts         转到状态 61
    stmtsHead     转到状态 62


状态 22

   58 fun_def: TOK_FUN prototype '=' . expr

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 63
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59


状态 23

   60 fun_def: TOK_FUN prototype exprBlock .

    $default  使用规则 60 以归约 (fun_def)


状态 24

   59 fun_def: TOK_FUN prototype_short '=' . expr

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 64
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59


状态 25

   71 val_def_short: L_IDENTIFIER ':' . type_identifier

    '('           偏移，并进入状态 30
    U_IDENTIFIER  偏移，并进入状态 31

    type_identifier       转到状态 65
    func_type_identifier  转到状态 33


状态 26

   70 val_def: TOK_VAL val_def_short '=' . expr

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 66
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59


状态 27

   65 prototype_short: L_IDENTIFIER '(' ')' .

    $default  使用规则 65 以归约 (prototype_short)


状态 28

   79 val_def_shorts: val_def_short .

    $default  使用规则 79 以归约 (val_def_shorts)


状态 29

   66 prototype_short: L_IDENTIFIER '(' val_def_shorts . ')'
   80 val_def_shorts: val_def_shorts . ',' val_def_short

    ')'  偏移，并进入状态 67
    ','  偏移，并进入状态 68


状态 30

    4 func_type_identifier: '(' . ')' TOK_TO type_identifier
    5                     | '(' . type_identifiers ')' TOK_TO type_identifier

    '('           偏移，并进入状态 30
    ')'           偏移，并进入状态 69
    U_IDENTIFIER  偏移，并进入状态 31

    type_identifier       转到状态 70
    func_type_identifier  转到状态 33
    type_identifiers      转到状态 71


状态 31

    1 type_identifier: U_IDENTIFIER .
    2                | U_IDENTIFIER . '[' type_parameters ']'

    '['  偏移，并进入状态 72

    $default  使用规则 1 以归约 (type_identifier)


状态 32

   64 prototype: prototype_short ':' type_identifier .

    $default  使用规则 64 以归约 (prototype)


状态 33

    3 type_identifier: func_type_identifier .

    $default  使用规则 3 以归约 (type_identifier)


状态 34

   18 expr: '(' . expr ')'

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 73
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59


状态 35

   45 unary_expr: '!' . expr

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 74
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59


状态 36

   50 boolean_expr: TOK_TRUE .

    $default  使用规则 50 以归约 (boolean_expr)


状态 37

   51 boolean_expr: TOK_FALSE .

    $default  使用规则 51 以归约 (boolean_expr)


状态 38

   52 unit_expr: TOK_UNIT .

    $default  使用规则 52 以归约 (unit_expr)


状态 39

   53 if_expr: TOK_IF . expr exprBlock TOK_ELSE exprBlock
   54        | TOK_IF . expr exprBlock TOK_ELSE if_expr
   55        | TOK_IF . expr exprBlock

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 75
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59


状态 40

   15 ret: TOK_RETURN . expr
   16    | TOK_RETURN .

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    $default  使用规则 16 以归约 (ret)

    expr          转到状态 76
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59


状态 41

   48 number_expr: TOK_NUMBER_INT .

    $default  使用规则 48 以归约 (number_expr)


状态 42

   49 number_expr: TOK_NUMBER_DOUBLE .

    $default  使用规则 49 以归约 (number_expr)


状态 43

   17 expr: L_IDENTIFIER .
   29 call_expr: L_IDENTIFIER . '(' ')'
   30          | L_IDENTIFIER . '(' exprs ')'
   31 index_expr: L_IDENTIFIER . '[' exprs ']'

    '('  偏移，并进入状态 77
    '['  偏移，并进入状态 78

    $default  使用规则 17 以归约 (expr)


状态 44

   46 array_expr: '[' . ']'
   47           | '[' . exprs ']'

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    ']'                偏移，并进入状态 79
    '{'                偏移，并进入状态 45

    expr          转到状态 80
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59
    exprs         转到状态 81


状态 45

   56 lambda_expr: '{' . val_def_shorts TOK_TO stmts '}'
   57            | '{' . stmts '}'

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IMPORT         偏移，并进入状态 1
    TOK_FUN            偏移，并进入状态 2
    TOK_IF             偏移，并进入状态 39
    TOK_VAL            偏移，并进入状态 3
    TOK_RETURN         偏移，并进入状态 40
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 82
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    statement       转到状态 47
    ret             转到状态 48
    expr            转到状态 49
    call_expr       转到状态 50
    index_expr      转到状态 51
    binary_expr     转到状态 52
    unary_expr      转到状态 53
    array_expr      转到状态 54
    number_expr     转到状态 55
    boolean_expr    转到状态 56
    unit_expr       转到状态 57
    if_expr         转到状态 58
    lambda_expr     转到状态 59
    fun_def         转到状态 4
    import          转到状态 5
    def             转到状态 60
    val_def         转到状态 7
    val_def_short   转到状态 28
    val_def_shorts  转到状态 83
    stmts           转到状态 84
    stmtsHead       转到状态 62


状态 46

   62 exprBlock: '{' '}' .

    $default  使用规则 62 以归约 (exprBlock)


状态 47

   81 stmts: statement .
   84 stmtsHead: statement . TOK_SEP

    TOK_SEP  偏移，并进入状态 85

    $default  使用规则 81 以归约 (stmts)


状态 48

   14 statement: ret .

    $default  使用规则 14 以归约 (statement)


状态 49

   12 statement: expr .
   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   34            | expr . '*' expr
   35            | expr . '/' expr
   36            | expr . '%' expr
   37            | expr . '<' expr
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr

    TOK_OR         偏移，并进入状态 86
    TOK_AND        偏移，并进入状态 87
    TOK_EQUAL      偏移，并进入状态 88
    TOK_GE         偏移，并进入状态 89
    TOK_LE         偏移，并进入状态 90
    TOK_NON_EQUAL  偏移，并进入状态 91
    '<'            偏移，并进入状态 92
    '>'            偏移，并进入状态 93
    '+'            偏移，并进入状态 94
    '-'            偏移，并进入状态 95
    '*'            偏移，并进入状态 96
    '/'            偏移，并进入状态 97
    '%'            偏移，并进入状态 98

    $default  使用规则 12 以归约 (statement)


状态 50

   19 expr: call_expr .

    $default  使用规则 19 以归约 (expr)


状态 51

   25 expr: index_expr .

    $default  使用规则 25 以归约 (expr)


状态 52

   20 expr: binary_expr .

    $default  使用规则 20 以归约 (expr)


状态 53

   28 expr: unary_expr .

    $default  使用规则 28 以归约 (expr)


状态 54

   24 expr: array_expr .

    $default  使用规则 24 以归约 (expr)


状态 55

   21 expr: number_expr .

    $default  使用规则 21 以归约 (expr)


状态 56

   22 expr: boolean_expr .

    $default  使用规则 22 以归约 (expr)


状态 57

   27 expr: unit_expr .

    $default  使用规则 27 以归约 (expr)


状态 58

   23 expr: if_expr .

    $default  使用规则 23 以归约 (expr)


状态 59

   26 expr: lambda_expr .

    $default  使用规则 26 以归约 (expr)


状态 60

   13 statement: def .

    $default  使用规则 13 以归约 (statement)


状态 61

   61 exprBlock: '{' stmts . '}'

    '}'  偏移，并进入状态 99


状态 62

   82 stmts: stmtsHead .
   83      | stmtsHead . statement
   85 stmtsHead: stmtsHead . statement TOK_SEP

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IMPORT         偏移，并进入状态 1
    TOK_FUN            偏移，并进入状态 2
    TOK_IF             偏移，并进入状态 39
    TOK_VAL            偏移，并进入状态 3
    TOK_RETURN         偏移，并进入状态 40
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    $default  使用规则 82 以归约 (stmts)

    statement     转到状态 100
    ret           转到状态 48
    expr          转到状态 49
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59
    fun_def       转到状态 4
    import        转到状态 5
    def           转到状态 60
    val_def       转到状态 7


状态 63

   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   34            | expr . '*' expr
   35            | expr . '/' expr
   36            | expr . '%' expr
   37            | expr . '<' expr
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr
   58 fun_def: TOK_FUN prototype '=' expr .

    TOK_OR         偏移，并进入状态 86
    TOK_AND        偏移，并进入状态 87
    TOK_EQUAL      偏移，并进入状态 88
    TOK_GE         偏移，并进入状态 89
    TOK_LE         偏移，并进入状态 90
    TOK_NON_EQUAL  偏移，并进入状态 91
    '<'            偏移，并进入状态 92
    '>'            偏移，并进入状态 93
    '+'            偏移，并进入状态 94
    '-'            偏移，并进入状态 95
    '*'            偏移，并进入状态 96
    '/'            偏移，并进入状态 97
    '%'            偏移，并进入状态 98

    $default  使用规则 58 以归约 (fun_def)


状态 64

   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   34            | expr . '*' expr
   35            | expr . '/' expr
   36            | expr . '%' expr
   37            | expr . '<' expr
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr
   59 fun_def: TOK_FUN prototype_short '=' expr .

    TOK_OR         偏移，并进入状态 86
    TOK_AND        偏移，并进入状态 87
    TOK_EQUAL      偏移，并进入状态 88
    TOK_GE         偏移，并进入状态 89
    TOK_LE         偏移，并进入状态 90
    TOK_NON_EQUAL  偏移，并进入状态 91
    '<'            偏移，并进入状态 92
    '>'            偏移，并进入状态 93
    '+'            偏移，并进入状态 94
    '-'            偏移，并进入状态 95
    '*'            偏移，并进入状态 96
    '/'            偏移，并进入状态 97
    '%'            偏移，并进入状态 98

    $default  使用规则 59 以归约 (fun_def)


状态 65

   71 val_def_short: L_IDENTIFIER ':' type_identifier .

    $default  使用规则 71 以归约 (val_def_short)


状态 66

   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   34            | expr . '*' expr
   35            | expr . '/' expr
   36            | expr . '%' expr
   37            | expr . '<' expr
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr
   70 val_def: TOK_VAL val_def_short '=' expr .

    TOK_OR         偏移，并进入状态 86
    TOK_AND        偏移，并进入状态 87
    TOK_EQUAL      偏移，并进入状态 88
    TOK_GE         偏移，并进入状态 89
    TOK_LE         偏移，并进入状态 90
    TOK_NON_EQUAL  偏移，并进入状态 91
    '<'            偏移，并进入状态 92
    '>'            偏移，并进入状态 93
    '+'            偏移，并进入状态 94
    '-'            偏移，并进入状态 95
    '*'            偏移，并进入状态 96
    '/'            偏移，并进入状态 97
    '%'            偏移，并进入状态 98

    $default  使用规则 70 以归约 (val_def)


状态 67

   66 prototype_short: L_IDENTIFIER '(' val_def_shorts ')' .

    $default  使用规则 66 以归约 (prototype_short)


状态 68

   80 val_def_shorts: val_def_shorts ',' . val_def_short

    L_IDENTIFIER  偏移，并进入状态 15

    val_def_short  转到状态 101


状态 69

    4 func_type_identifier: '(' ')' . TOK_TO type_identifier

    TOK_TO  偏移，并进入状态 102


状态 70

    6 type_identifiers: type_identifier .

    $default  使用规则 6 以归约 (type_identifiers)


状态 71

    5 func_type_identifier: '(' type_identifiers . ')' TOK_TO type_identifier
    7 type_identifiers: type_identifiers . ',' type_identifier

    ')'  偏移，并进入状态 103
    ','  偏移，并进入状态 104


状态 72

    2 type_identifier: U_IDENTIFIER '[' . type_parameters ']'

    '('             偏移，并进入状态 30
    TOK_NUMBER_INT  偏移，并进入状态 105
    U_IDENTIFIER    偏移，并进入状态 31

    type_identifier       转到状态 106
    func_type_identifier  转到状态 33
    type_parameters       转到状态 107
    type_param            转到状态 108


状态 73

   18 expr: '(' expr . ')'
   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   34            | expr . '*' expr
   35            | expr . '/' expr
   36            | expr . '%' expr
   37            | expr . '<' expr
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr

    TOK_OR         偏移，并进入状态 86
    TOK_AND        偏移，并进入状态 87
    TOK_EQUAL      偏移，并进入状态 88
    TOK_GE         偏移，并进入状态 89
    TOK_LE         偏移，并进入状态 90
    TOK_NON_EQUAL  偏移，并进入状态 91
    '<'            偏移，并进入状态 92
    '>'            偏移，并进入状态 93
    '+'            偏移，并进入状态 94
    '-'            偏移，并进入状态 95
    '*'            偏移，并进入状态 96
    '/'            偏移，并进入状态 97
    '%'            偏移，并进入状态 98
    ')'            偏移，并进入状态 109


状态 74

   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   34            | expr . '*' expr
   35            | expr . '/' expr
   36            | expr . '%' expr
   37            | expr . '<' expr
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr
   45 unary_expr: '!' expr .

    $default  使用规则 45 以归约 (unary_expr)


状态 75

   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   34            | expr . '*' expr
   35            | expr . '/' expr
   36            | expr . '%' expr
   37            | expr . '<' expr
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr
   53 if_expr: TOK_IF expr . exprBlock TOK_ELSE exprBlock
   54        | TOK_IF expr . exprBlock TOK_ELSE if_expr
   55        | TOK_IF expr . exprBlock

    TOK_OR         偏移，并进入状态 86
    TOK_AND        偏移，并进入状态 87
    TOK_EQUAL      偏移，并进入状态 88
    TOK_GE         偏移，并进入状态 89
    TOK_LE         偏移，并进入状态 90
    TOK_NON_EQUAL  偏移，并进入状态 91
    '<'            偏移，并进入状态 92
    '>'            偏移，并进入状态 93
    '+'            偏移，并进入状态 94
    '-'            偏移，并进入状态 95
    '*'            偏移，并进入状态 96
    '/'            偏移，并进入状态 97
    '%'            偏移，并进入状态 98
    '{'            偏移，并进入状态 21

    exprBlock  转到状态 110


状态 76

   15 ret: TOK_RETURN expr .
   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   34            | expr . '*' expr
   35            | expr . '/' expr
   36            | expr . '%' expr
   37            | expr . '<' expr
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr

    TOK_OR         偏移，并进入状态 86
    TOK_AND        偏移，并进入状态 87
    TOK_EQUAL      偏移，并进入状态 88
    TOK_GE         偏移，并进入状态 89
    TOK_LE         偏移，并进入状态 90
    TOK_NON_EQUAL  偏移，并进入状态 91
    '<'            偏移，并进入状态 92
    '>'            偏移，并进入状态 93
    '+'            偏移，并进入状态 94
    '-'            偏移，并进入状态 95
    '*'            偏移，并进入状态 96
    '/'            偏移，并进入状态 97
    '%'            偏移，并进入状态 98

    $default  使用规则 15 以归约 (ret)


状态 77

   29 call_expr: L_IDENTIFIER '(' . ')'
   30          | L_IDENTIFIER '(' . exprs ')'

    '('                偏移，并进入状态 34
    ')'                偏移，并进入状态 111
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 80
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59
    exprs         转到状态 112


状态 78

   31 index_expr: L_IDENTIFIER '[' . exprs ']'

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 80
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59
    exprs         转到状态 113


状态 79

   46 array_expr: '[' ']' .

    $default  使用规则 46 以归约 (array_expr)


状态 80

   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   34            | expr . '*' expr
   35            | expr . '/' expr
   36            | expr . '%' expr
   37            | expr . '<' expr
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr
   75 exprs: expr .

    TOK_OR         偏移，并进入状态 86
    TOK_AND        偏移，并进入状态 87
    TOK_EQUAL      偏移，并进入状态 88
    TOK_GE         偏移，并进入状态 89
    TOK_LE         偏移，并进入状态 90
    TOK_NON_EQUAL  偏移，并进入状态 91
    '<'            偏移，并进入状态 92
    '>'            偏移，并进入状态 93
    '+'            偏移，并进入状态 94
    '-'            偏移，并进入状态 95
    '*'            偏移，并进入状态 96
    '/'            偏移，并进入状态 97
    '%'            偏移，并进入状态 98

    $default  使用规则 75 以归约 (exprs)


状态 81

   47 array_expr: '[' exprs . ']'
   76 exprs: exprs . ',' expr

    ']'  偏移，并进入状态 114
    ','  偏移，并进入状态 115


状态 82

   17 expr: L_IDENTIFIER .
   29 call_expr: L_IDENTIFIER . '(' ')'
   30          | L_IDENTIFIER . '(' exprs ')'
   31 index_expr: L_IDENTIFIER . '[' exprs ']'
   71 val_def_short: L_IDENTIFIER . ':' type_identifier
   72              | L_IDENTIFIER .

    '('  偏移，并进入状态 77
    '['  偏移，并进入状态 78
    ':'  偏移，并进入状态 25

    TOK_TO    使用规则 72 以归约 (val_def_short)
    ','       使用规则 72 以归约 (val_def_short)
    $default  使用规则 17 以归约 (expr)


状态 83

   56 lambda_expr: '{' val_def_shorts . TOK_TO stmts '}'
   80 val_def_shorts: val_def_shorts . ',' val_def_short

    TOK_TO  偏移，并进入状态 116
    ','     偏移，并进入状态 68


状态 84

   57 lambda_expr: '{' stmts . '}'

    '}'  偏移，并进入状态 117


状态 85

   84 stmtsHead: statement TOK_SEP .

    $default  使用规则 84 以归约 (stmtsHead)


状态 86

   43 binary_expr: expr TOK_OR . expr

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 118
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59


状态 87

   44 binary_expr: expr TOK_AND . expr

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 119
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59


状态 88

   39 binary_expr: expr TOK_EQUAL . expr

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 120
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59


状态 89

   42 binary_expr: expr TOK_GE . expr

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 121
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59


状态 90

   41 binary_expr: expr TOK_LE . expr

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 122
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59


状态 91

   40 binary_expr: expr TOK_NON_EQUAL . expr

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 123
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59


状态 92

   37 binary_expr: expr '<' . expr

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 124
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59


状态 93

   38 binary_expr: expr '>' . expr

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 125
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59


状态 94

   32 binary_expr: expr '+' . expr

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 126
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59


状态 95

   33 binary_expr: expr '-' . expr

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 127
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59


状态 96

   34 binary_expr: expr '*' . expr

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 128
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59


状态 97

   35 binary_expr: expr '/' . expr

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 129
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59


状态 98

   36 binary_expr: expr '%' . expr

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 130
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59


状态 99

   61 exprBlock: '{' stmts '}' .

    $default  使用规则 61 以归约 (exprBlock)


状态 100

   83 stmts: stmtsHead statement .
   85 stmtsHead: stmtsHead statement . TOK_SEP

    TOK_SEP  偏移，并进入状态 131

    $default  使用规则 83 以归约 (stmts)


状态 101

   80 val_def_shorts: val_def_shorts ',' val_def_short .

    $default  使用规则 80 以归约 (val_def_shorts)


状态 102

    4 func_type_identifier: '(' ')' TOK_TO . type_identifier

    '('           偏移，并进入状态 30
    U_IDENTIFIER  偏移，并进入状态 31

    type_identifier       转到状态 132
    func_type_identifier  转到状态 33


状态 103

    5 func_type_identifier: '(' type_identifiers ')' . TOK_TO type_identifier

    TOK_TO  偏移，并进入状态 133


状态 104

    7 type_identifiers: type_identifiers ',' . type_identifier

    '('           偏移，并进入状态 30
    U_IDENTIFIER  偏移，并进入状态 31

    type_identifier       转到状态 134
    func_type_identifier  转到状态 33


状态 105

   11 type_param: TOK_NUMBER_INT .

    $default  使用规则 11 以归约 (type_param)


状态 106

   10 type_param: type_identifier .

    $default  使用规则 10 以归约 (type_param)


状态 107

    2 type_identifier: U_IDENTIFIER '[' type_parameters . ']'
    9 type_parameters: type_parameters . ',' type_param

    ']'  偏移，并进入状态 135
    ','  偏移，并进入状态 136


状态 108

    8 type_parameters: type_param .

    $default  使用规则 8 以归约 (type_parameters)


状态 109

   18 expr: '(' expr ')' .

    $default  使用规则 18 以归约 (expr)


状态 110

   53 if_expr: TOK_IF expr exprBlock . TOK_ELSE exprBlock
   54        | TOK_IF expr exprBlock . TOK_ELSE if_expr
   55        | TOK_IF expr exprBlock .

    TOK_ELSE  偏移，并进入状态 137

    $default  使用规则 55 以归约 (if_expr)


状态 111

   29 call_expr: L_IDENTIFIER '(' ')' .

    $default  使用规则 29 以归约 (call_expr)


状态 112

   30 call_expr: L_IDENTIFIER '(' exprs . ')'
   76 exprs: exprs . ',' expr

    ')'  偏移，并进入状态 138
    ','  偏移，并进入状态 115


状态 113

   31 index_expr: L_IDENTIFIER '[' exprs . ']'
   76 exprs: exprs . ',' expr

    ']'  偏移，并进入状态 139
    ','  偏移，并进入状态 115


状态 114

   47 array_expr: '[' exprs ']' .

    $default  使用规则 47 以归约 (array_expr)


状态 115

   76 exprs: exprs ',' . expr

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IF             偏移，并进入状态 39
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    expr          转到状态 140
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59


状态 116

   56 lambda_expr: '{' val_def_shorts TOK_TO . stmts '}'

    '('                偏移，并进入状态 34
    '!'                偏移，并进入状态 35
    TOK_TRUE           偏移，并进入状态 36
    TOK_FALSE          偏移，并进入状态 37
    TOK_UNIT           偏移，并进入状态 38
    TOK_IMPORT         偏移，并进入状态 1
    TOK_FUN            偏移，并进入状态 2
    TOK_IF             偏移，并进入状态 39
    TOK_VAL            偏移，并进入状态 3
    TOK_RETURN         偏移，并进入状态 40
    TOK_NUMBER_INT     偏移，并进入状态 41
    TOK_NUMBER_DOUBLE  偏移，并进入状态 42
    L_IDENTIFIER       偏移，并进入状态 43
    '['                偏移，并进入状态 44
    '{'                偏移，并进入状态 45

    statement     转到状态 47
    ret           转到状态 48
    expr          转到状态 49
    call_expr     转到状态 50
    index_expr    转到状态 51
    binary_expr   转到状态 52
    unary_expr    转到状态 53
    array_expr    转到状态 54
    number_expr   转到状态 55
    boolean_expr  转到状态 56
    unit_expr     转到状态 57
    if_expr       转到状态 58
    lambda_expr   转到状态 59
    fun_def       转到状态 4
    import        转到状态 5
    def           转到状态 60
    val_def       转到状态 7
    stmts         转到状态 141
    stmtsHead     转到状态 62


状态 117

   57 lambda_expr: '{' stmts '}' .

    $default  使用规则 57 以归约 (lambda_expr)


状态 118

   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   34            | expr . '*' expr
   35            | expr . '/' expr
   36            | expr . '%' expr
   37            | expr . '<' expr
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   43            | expr TOK_OR expr .
   44            | expr . TOK_AND expr

    TOK_AND        偏移，并进入状态 87
    TOK_EQUAL      偏移，并进入状态 88
    TOK_GE         偏移，并进入状态 89
    TOK_LE         偏移，并进入状态 90
    TOK_NON_EQUAL  偏移，并进入状态 91
    '<'            偏移，并进入状态 92
    '>'            偏移，并进入状态 93
    '+'            偏移，并进入状态 94
    '-'            偏移，并进入状态 95
    '*'            偏移，并进入状态 96
    '/'            偏移，并进入状态 97
    '%'            偏移，并进入状态 98

    $default  使用规则 43 以归约 (binary_expr)


状态 119

   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   34            | expr . '*' expr
   35            | expr . '/' expr
   36            | expr . '%' expr
   37            | expr . '<' expr
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr
   44            | expr TOK_AND expr .

    TOK_EQUAL      偏移，并进入状态 88
    TOK_GE         偏移，并进入状态 89
    TOK_LE         偏移，并进入状态 90
    TOK_NON_EQUAL  偏移，并进入状态 91
    '<'            偏移，并进入状态 92
    '>'            偏移，并进入状态 93
    '+'            偏移，并进入状态 94
    '-'            偏移，并进入状态 95
    '*'            偏移，并进入状态 96
    '/'            偏移，并进入状态 97
    '%'            偏移，并进入状态 98

    $default  使用规则 44 以归约 (binary_expr)


状态 120

   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   34            | expr . '*' expr
   35            | expr . '/' expr
   36            | expr . '%' expr
   37            | expr . '<' expr
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   39            | expr TOK_EQUAL expr .
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr

    '+'  偏移，并进入状态 94
    '-'  偏移，并进入状态 95
    '*'  偏移，并进入状态 96
    '/'  偏移，并进入状态 97
    '%'  偏移，并进入状态 98

    $default  使用规则 39 以归约 (binary_expr)


状态 121

   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   34            | expr . '*' expr
   35            | expr . '/' expr
   36            | expr . '%' expr
   37            | expr . '<' expr
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   42            | expr TOK_GE expr .
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr

    '+'  偏移，并进入状态 94
    '-'  偏移，并进入状态 95
    '*'  偏移，并进入状态 96
    '/'  偏移，并进入状态 97
    '%'  偏移，并进入状态 98

    $default  使用规则 42 以归约 (binary_expr)


状态 122

   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   34            | expr . '*' expr
   35            | expr . '/' expr
   36            | expr . '%' expr
   37            | expr . '<' expr
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   41            | expr TOK_LE expr .
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr

    '+'  偏移，并进入状态 94
    '-'  偏移，并进入状态 95
    '*'  偏移，并进入状态 96
    '/'  偏移，并进入状态 97
    '%'  偏移，并进入状态 98

    $default  使用规则 41 以归约 (binary_expr)


状态 123

   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   34            | expr . '*' expr
   35            | expr . '/' expr
   36            | expr . '%' expr
   37            | expr . '<' expr
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   40            | expr TOK_NON_EQUAL expr .
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr

    '+'  偏移，并进入状态 94
    '-'  偏移，并进入状态 95
    '*'  偏移，并进入状态 96
    '/'  偏移，并进入状态 97
    '%'  偏移，并进入状态 98

    $default  使用规则 40 以归约 (binary_expr)


状态 124

   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   34            | expr . '*' expr
   35            | expr . '/' expr
   36            | expr . '%' expr
   37            | expr . '<' expr
   37            | expr '<' expr .
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr

    '+'  偏移，并进入状态 94
    '-'  偏移，并进入状态 95
    '*'  偏移，并进入状态 96
    '/'  偏移，并进入状态 97
    '%'  偏移，并进入状态 98

    $default  使用规则 37 以归约 (binary_expr)


状态 125

   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   34            | expr . '*' expr
   35            | expr . '/' expr
   36            | expr . '%' expr
   37            | expr . '<' expr
   38            | expr . '>' expr
   38            | expr '>' expr .
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr

    '+'  偏移，并进入状态 94
    '-'  偏移，并进入状态 95
    '*'  偏移，并进入状态 96
    '/'  偏移，并进入状态 97
    '%'  偏移，并进入状态 98

    $default  使用规则 38 以归约 (binary_expr)


状态 126

   32 binary_expr: expr . '+' expr
   32            | expr '+' expr .
   33            | expr . '-' expr
   34            | expr . '*' expr
   35            | expr . '/' expr
   36            | expr . '%' expr
   37            | expr . '<' expr
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr

    '*'  偏移，并进入状态 96
    '/'  偏移，并进入状态 97
    '%'  偏移，并进入状态 98

    $default  使用规则 32 以归约 (binary_expr)


状态 127

   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   33            | expr '-' expr .
   34            | expr . '*' expr
   35            | expr . '/' expr
   36            | expr . '%' expr
   37            | expr . '<' expr
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr

    '*'  偏移，并进入状态 96
    '/'  偏移，并进入状态 97
    '%'  偏移，并进入状态 98

    $default  使用规则 33 以归约 (binary_expr)


状态 128

   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   34            | expr . '*' expr
   34            | expr '*' expr .
   35            | expr . '/' expr
   36            | expr . '%' expr
   37            | expr . '<' expr
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr

    $default  使用规则 34 以归约 (binary_expr)


状态 129

   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   34            | expr . '*' expr
   35            | expr . '/' expr
   35            | expr '/' expr .
   36            | expr . '%' expr
   37            | expr . '<' expr
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr

    $default  使用规则 35 以归约 (binary_expr)


状态 130

   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   34            | expr . '*' expr
   35            | expr . '/' expr
   36            | expr . '%' expr
   36            | expr '%' expr .
   37            | expr . '<' expr
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr

    $default  使用规则 36 以归约 (binary_expr)


状态 131

   85 stmtsHead: stmtsHead statement TOK_SEP .

    $default  使用规则 85 以归约 (stmtsHead)


状态 132

    4 func_type_identifier: '(' ')' TOK_TO type_identifier .

    $default  使用规则 4 以归约 (func_type_identifier)


状态 133

    5 func_type_identifier: '(' type_identifiers ')' TOK_TO . type_identifier

    '('           偏移，并进入状态 30
    U_IDENTIFIER  偏移，并进入状态 31

    type_identifier       转到状态 142
    func_type_identifier  转到状态 33


状态 134

    7 type_identifiers: type_identifiers ',' type_identifier .

    $default  使用规则 7 以归约 (type_identifiers)


状态 135

    2 type_identifier: U_IDENTIFIER '[' type_parameters ']' .

    $default  使用规则 2 以归约 (type_identifier)


状态 136

    9 type_parameters: type_parameters ',' . type_param

    '('             偏移，并进入状态 30
    TOK_NUMBER_INT  偏移，并进入状态 105
    U_IDENTIFIER    偏移，并进入状态 31

    type_identifier       转到状态 106
    func_type_identifier  转到状态 33
    type_param            转到状态 143


状态 137

   53 if_expr: TOK_IF expr exprBlock TOK_ELSE . exprBlock
   54        | TOK_IF expr exprBlock TOK_ELSE . if_expr

    TOK_IF  偏移，并进入状态 39
    '{'     偏移，并进入状态 21

    if_expr    转到状态 144
    exprBlock  转到状态 145


状态 138

   30 call_expr: L_IDENTIFIER '(' exprs ')' .

    $default  使用规则 30 以归约 (call_expr)


状态 139

   31 index_expr: L_IDENTIFIER '[' exprs ']' .

    $default  使用规则 31 以归约 (index_expr)


状态 140

   32 binary_expr: expr . '+' expr
   33            | expr . '-' expr
   34            | expr . '*' expr
   35            | expr . '/' expr
   36            | expr . '%' expr
   37            | expr . '<' expr
   38            | expr . '>' expr
   39            | expr . TOK_EQUAL expr
   40            | expr . TOK_NON_EQUAL expr
   41            | expr . TOK_LE expr
   42            | expr . TOK_GE expr
   43            | expr . TOK_OR expr
   44            | expr . TOK_AND expr
   76 exprs: exprs ',' expr .

    TOK_OR         偏移，并进入状态 86
    TOK_AND        偏移，并进入状态 87
    TOK_EQUAL      偏移，并进入状态 88
    TOK_GE         偏移，并进入状态 89
    TOK_LE         偏移，并进入状态 90
    TOK_NON_EQUAL  偏移，并进入状态 91
    '<'            偏移，并进入状态 92
    '>'            偏移，并进入状态 93
    '+'            偏移，并进入状态 94
    '-'            偏移，并进入状态 95
    '*'            偏移，并进入状态 96
    '/'            偏移，并进入状态 97
    '%'            偏移，并进入状态 98

    $default  使用规则 76 以归约 (exprs)


状态 141

   56 lambda_expr: '{' val_def_shorts TOK_TO stmts . '}'

    '}'  偏移，并进入状态 146


状态 142

    5 func_type_identifier: '(' type_identifiers ')' TOK_TO type_identifier .

    $default  使用规则 5 以归约 (func_type_identifier)


状态 143

    9 type_parameters: type_parameters ',' type_param .

    $default  使用规则 9 以归约 (type_parameters)


状态 144

   54 if_expr: TOK_IF expr exprBlock TOK_ELSE if_expr .

    $default  使用规则 54 以归约 (if_expr)


状态 145

   53 if_expr: TOK_IF expr exprBlock TOK_ELSE exprBlock .

    $default  使用规则 53 以归约 (if_expr)


状态 146

   56 lambda_expr: '{' val_def_shorts TOK_TO stmts '}' .

    $default  使用规则 56 以归约 (lambda_expr)
